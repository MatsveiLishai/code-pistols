// @ts-nocheck
import { createFileRoute } from "@tanstack/react-router"
import { useMemo, useState, useCallback } from "react"

// Swiper imports
import { Swiper, SwiperSlide } from "swiper/react"
import { Mousewheel, Keyboard } from "swiper/modules"
// eslint-disable-next-line import/no-unresolved
import "swiper/css"

// Components
import { OnboardingFlow, BetAmountPrompt, TinderBetHeader, CustomizationMenu } from "../components"
import { Slide } from "../components/slide"

// Hooks
import { useTinderBetOnboarding, useBetAmount } from "../hooks"

// Mock data
import basketballEvents from "../mock-data/basketball_events.json"
import boxingEvents from "../mock-data/boxing_events.json"
import csEvents from "../mock-data/cs_events.json"
import dotaEvents from "../mock-data/dota_events.json"
import footballEvents from "../mock-data/football_events.json"
import tennisEvents from "../mock-data/tennis_events.json"

// Styles
import "./tinder-bet.scss"

// Swiper modules configuration
const SWIPER_MODULES = [Mousewheel, Keyboard]

// –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —Å–ø–æ—Ä—Ç–æ–≤ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
const SPORTS_DATA = [
  { name: "basketball", events: basketballEvents },
  { name: "boxing", events: boxingEvents },
  { name: "cs", events: csEvents },
  { name: "dota", events: dotaEvents },
  { name: "tennis", events: tennisEvents },
  { name: "football", events: footballEvents },
]

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ (–∞–ª–≥–æ—Ä–∏—Ç–º –§–∏—à–µ—Ä–∞-–ô–µ—Ç—Å–∞)
const shuffleArray = (array) => {
  const shuffled = [...array]
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1))
    ;[shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]]
  }
  return shuffled
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ–º
const getRotatedEvents = () => {
  const allEvents = []

  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å–ø–æ—Ä—Ç–æ–≤ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
  const shuffledSports = shuffleArray(SPORTS_DATA)

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –≤—Å–µ—Ö —Å–ø–æ—Ä—Ç–æ–≤, —á–µ—Ä–µ–¥—É—è –∏—Ö –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
  const maxEventsPerSport = Math.max(...shuffledSports.map((sport) => sport.events.length))

  for (let i = 0; i < maxEventsPerSport; i++) {
    shuffledSports.forEach((sport) => {
      if (sport.events[i]) {
        allEvents.push({
          ...sport.events[i],
          sportType: sport.name, // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —Å–ø–æ—Ä—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        })
      }
    })
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–µ—Å—å –º–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –±–æ–ª—å—à–µ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
  return shuffleArray(allEvents)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –º–æ–∫ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç Slide
const transformMockDataToSlide = (mockEvent) => {
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  // eslint-disable-next-line no-console
  console.log(
    `üéØ Processing ${mockEvent.event.type}: ${mockEvent.event.teams.home.name} vs ${mockEvent.event.teams.away.name}`
  )
  // eslint-disable-next-line no-console
  console.log(
    "Available markets:",
    mockEvent.markets.map((m) => m.id)
  )

  // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–∞—Ä–∫–µ—Ç –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  let winnerMarket = mockEvent.markets.find((market) => market.id === "winner_incl_ot")

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ winner_incl_ot, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ winner
  if (!winnerMarket) {
    winnerMarket = mockEvent.markets.find((market) => market.id === "winner")
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ winner, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ point_handicap
  if (!winnerMarket) {
    winnerMarket = mockEvent.markets.find((market) => market.id === "point_handicap")
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ point_handicap, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ map_handicap (–¥–ª—è Dota2)
  if (!winnerMarket) {
    winnerMarket = mockEvent.markets.find((market) => market.id === "map_handicap")
  }

  // // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ map_handicap, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π handicap –º–∞—Ä–∫–µ—Ç
  // if (!winnerMarket) {
  //   winnerMarket = mockEvent.markets.find(market => market.id.includes('handicap'));
  // }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ handicap, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π –º–∞—Ä–∫–µ—Ç —Å 2+ –∏—Å—Ö–æ–¥–∞–º–∏
  if (!winnerMarket) {
    winnerMarket = mockEvent.markets.find((market) => market.selections.length >= 2)
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–∏–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–∞—Ä–∫–µ—Ç –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ö–æ–¥–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
  if (!winnerMarket || winnerMarket.selections.length < 2) {
    // eslint-disable-next-line no-console
    console.log(`‚ùå No suitable market found for ${mockEvent.event.type}`)
    return null
  }

  // eslint-disable-next-line no-console
  console.log(
    `‚úÖ Using market: ${winnerMarket.id} with ${winnerMarket.selections.length} selections`
  )

  return {
    type: "betVideo", // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏–¥–µ–æ —Ç–∏–ø
    event: {
      ...mockEvent.event,
      score: mockEvent.event.score || "0 : 0", // –î–æ–±–∞–≤–ª—è–µ–º score —Å fallback
    },
    primaryOutcome: winnerMarket.selections[0], // –ü–µ—Ä–≤—ã–π –∏—Å—Ö–æ–¥ (–¥–æ–º–∞—à–Ω—è—è –∫–æ–º–∞–Ω–¥–∞)
    secondaryOutcome: winnerMarket.selections[1], // –í—Ç–æ—Ä–æ–π –∏—Å—Ö–æ–¥ (–≥–æ—Å—Ç–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞)
  }
}

export const Route = createFileRoute("/")({
  component: HomePage,
})

function HomePage() {
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –≤—Å–µ—Ö —Å–ø–æ—Ä—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤ —Å–ª–∞–π–¥–æ–≤ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ–º
  const slidesData = useMemo(() => {
    const rotatedEvents = getRotatedEvents()

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    // eslint-disable-next-line no-console
    console.log(
      "üéØ Randomly shuffled events order:",
      rotatedEvents.map(
        (e) => `${e.sportType}: ${e.event.teams.home.name} vs ${e.event.teams.away.name}`
      )
    )

    if (rotatedEvents.length > 0) {
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –±–µ–∑ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ä–∫–µ—Ç–æ–≤
      const slides = rotatedEvents
        .map((event) => transformMockDataToSlide(event))
        .filter((slide) => slide !== null)
      // eslint-disable-next-line no-console
      console.log("üéØ Generated slides count:", slides.length)
      return slides
    }
    return []
  }, [])

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–∞–π–¥–∞ –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  const [activeIndex, setActiveIndex] = useState(0)

  // All hooks must be called before any conditional returns
  const [isCustomizationOpen, setIsCustomizationOpen] = useState(false)
  const [hasSwipedOnce, setHasSwipedOnce] = useState(false)
  const [isContainMode, setIsContainMode] = useState(false)
  const onboarding = useTinderBetOnboarding()
  const betAmount = useBetAmount()

  const handleOutcomeClick = useCallback(
    (outcome) => {
      setHasSwipedOnce(true)
      // eslint-disable-next-line no-console
      console.log("üéØ Outcome clicked:", outcome)
      // eslint-disable-next-line no-console
      console.log(
        "üí∞ Bet amount:",
        betAmount.amount,
        "Odds:",
        outcome.odds,
        "Win amount:",
        (betAmount.amount * outcome.odds).toFixed(2)
      )
    },
    [betAmount.amount]
  )

  const handleOpenCustomization = useCallback(() => {
    setIsCustomizationOpen(true)
  }, [])

  const handleCloseCustomization = useCallback(() => {
    setIsCustomizationOpen(false)
  }, [])

  const handleSaveCustomization = useCallback(() => {
    // Additional save logic can be added here if needed
  }, [])

  const handleBetAmountContinue = useCallback(() => {
    // Continue to feed after setting bet amount
  }, [])

  const toggleDisplayMode = useCallback(() => {
    setIsContainMode((prev) => !prev)
  }, [])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ª–∞–π–¥–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
  const handleSlideChange = useCallback((swiper) => {
    setActiveIndex(swiper.activeIndex)
  }, [])

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–∞–π–¥—ã - –∑–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–∞–π–¥–∞ ¬± 1
  const optimizedSlidesData = useMemo(
    () =>
      slidesData.map((slide, index) => {
        const shouldLoad = Math.abs(index - activeIndex) <= 1
        return shouldLoad ? slide : { ...slide, event: { ...slide.event, video: null } }
      }),
    [slidesData, activeIndex]
  )

  // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
  if (!slidesData || slidesData.length === 0) {
    return (
      <div className="sb-TinderBet">
        <div className="sb-TinderBet__error">No data available</div>
      </div>
    )
  }

  const renderContent = () => {
    // Show onboarding if not completed
    if (!onboarding.isCompleted) {
      return (
        <OnboardingFlow
          currentStep={onboarding.currentStep}
          freeBetsLeft={betAmount.freeBetsLeft}
          gamblingLevel={onboarding.gamblingLevel}
          selectedLeagues={onboarding.selectedLeagues}
          onComplete={onboarding.completeOnboarding}
          onNextStep={onboarding.nextStep}
          onPreviousStep={onboarding.previousStep}
          onSetGamblingLevel={onboarding.setGamblingLevel}
          onSetLeagues={onboarding.setSelectedLeagues}
          onSkipCustomization={onboarding.skipCustomization}
        />
      )
    }

    // Show bet amount prompt if user needs to set amount
    if (betAmount.needsAmountSetup) {
      return (
        <BetAmountPrompt
          amount={betAmount.amount}
          balance={betAmount.balance}
          customAmount={betAmount.customAmount}
          validationError={betAmount.validationError}
          onAmountSelect={betAmount.setAmount}
          onContinue={handleBetAmountContinue}
          onCustomAmountApply={betAmount.applyCustomAmount}
          onCustomAmountChange={betAmount.setCustomAmount}
        />
      )
    }

    // Show the main feed
    return (
      <div className="sb-TinderBet-mainContent">
        <TinderBetHeader
          isContainMode={isContainMode}
          onContainModeChange={toggleDisplayMode}
          onSettingsClick={handleOpenCustomization}
        />
        <div className="sb-TinderBetWrapper-content">
          <Swiper
            className="sb-TinderBet-swiper"
            direction="vertical"
            modules={SWIPER_MODULES}
            slidesPerView={1}
            speed={600}
            touchAngle={45}
            touchStartPreventDefault={false}
            keyboard
            mousewheel
            onSlideChange={handleSlideChange}
          >
            {optimizedSlidesData.map((slide, index) => {
              const slideKey = `${slide.event.teams.home.id}-${slide.event.teams.away.id}`
              const shouldRenderContent = Math.abs(index - activeIndex) <= 1

              return (
                <SwiperSlide key={slideKey} className="sb-TinderBet-swiperSlide">
                  {shouldRenderContent ? (
                    <Slide
                      betAmount={betAmount.amount}
                      hasSwipedOnce={hasSwipedOnce}
                      isContainMode={isContainMode}
                      slide={slide}
                      onContainModeChange={toggleDisplayMode}
                      onOutcomeClick={handleOutcomeClick}
                    />
                  ) : (
                    <div className="sb-Slide-placeholder" />
                  )}
                </SwiperSlide>
              )
            })}
          </Swiper>
        </div>
      </div>
    )
  }

  return (
    <div className="sb-TinderBet">
      {renderContent()}

      <CustomizationMenu
        balance={betAmount.balance}
        betAmount={betAmount.amount}
        customAmount={betAmount.customAmount}
        freeBetsLeft={betAmount.freeBetsLeft}
        gamblingLevel={onboarding.gamblingLevel}
        isOpen={isCustomizationOpen}
        selectedLeagues={onboarding.selectedLeagues}
        validationError={betAmount.validationError}
        onApplyCustomAmount={betAmount.applyCustomAmount}
        onClose={handleCloseCustomization}
        onSave={handleSaveCustomization}
        onSetAmount={betAmount.setAmount}
        onSetCustomAmount={betAmount.setCustomAmount}
        onSetGamblingLevel={onboarding.setGamblingLevel}
        onSetLeagues={onboarding.setSelectedLeagues}
      />
    </div>
  )
}
